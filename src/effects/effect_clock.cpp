#include "effect_clock.h"
#include "lib/logger.h"
#include "protogen.h"


namespace toaster {


static const uint8_t PROGMEM IMAGE_CLOCK[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x0a, 0x08, 0x06, 0x00, 0x00, 0x00, 0x30, 0xd3, 0x99,
  0xc8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
  0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
  0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00, 0x01, 0x22, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda,
  0xd4, 0x57, 0xdb, 0x16, 0x84, 0x20, 0x08, 0x8c, 0x3d, 0xfd, 0xff, 0x2f, 0xbb, 0xae, 0x47, 0x8a,
  0x74, 0xd0, 0xb1, 0xe5, 0xa1, 0xf0, 0xa9, 0x70, 0xb8, 0x8c, 0x82, 0x2a, 0x9b, 0x4a, 0xca, 0x43,
  0x45, 0xf2, 0x40, 0xa2, 0x73, 0x5a, 0xbd, 0xc5, 0x1a, 0x1b, 0x29, 0xa5, 0x4d, 0x44, 0xe6, 0xfa,
  0x91, 0x0f, 0x84, 0x3d, 0xa7, 0xca, 0x81, 0xf7, 0xe2, 0x67, 0xf0, 0x4e, 0x7c, 0xb3, 0xfc, 0x2e,
  0xb6, 0x12, 0x76, 0x23, 0x5d, 0x52, 0x0c, 0x89, 0xc8, 0x39, 0xf8, 0x57, 0x12, 0xc8, 0x3c, 0x52,
  0x18, 0xe0, 0xa3, 0x2c, 0x00, 0xc2, 0x93, 0x0b, 0xef, 0xe2, 0x57, 0xe2, 0x1b, 0xe4, 0xa7, 0xff,
  0x94, 0x5c, 0x5d, 0x6c, 0x4b, 0xf6, 0xde, 0x19, 0x50, 0xa3, 0xbf, 0x41, 0xec, 0xa2, 0x61, 0xe2,
  0x8c, 0x9e, 0xd8, 0x69, 0x14, 0xce, 0xf3, 0x33, 0xf0, 0x5f, 0x77, 0x6f, 0x9c, 0x9c, 0x39, 0x1c,
  0x3e, 0x3f, 0x14, 0x50, 0xea, 0x88, 0x48, 0x78, 0x01, 0xd3, 0xb5, 0x8f, 0x17, 0xca, 0xde, 0x25,
  0xba, 0x42, 0xcc, 0x84, 0xa8, 0x0b, 0x41, 0xed, 0x0e, 0x5d, 0x69, 0x01, 0x63, 0xbc, 0xab, 0xa7,
  0x16, 0xd3, 0x56, 0x2c, 0xc2, 0x7b, 0xfa, 0x66, 0x23, 0x94, 0xb6, 0x70, 0x56, 0xbc, 0x43, 0x70,
  0x44, 0x79, 0x30, 0xa5, 0x5a, 0x03, 0x2e, 0x27, 0x4c, 0x72, 0x08, 0xcc, 0xdf, 0x75, 0x8a, 0x40,
  0x5f, 0x2d, 0x1e, 0xd8, 0xb7, 0xa5, 0x3a, 0x3b, 0x2f, 0x20, 0xde, 0x92, 0x3c, 0x69, 0x67, 0x5e,
  0xb5, 0xed, 0xb7, 0xfa, 0x65, 0x44, 0x5b, 0xf0, 0x7c, 0x1a, 0x5b, 0xff, 0x14, 0x53, 0x68, 0x8c,
  0x61, 0x2d, 0xe2, 0x45, 0x81, 0x3f, 0x52, 0xe0, 0x21, 0xd7, 0xde, 0x14, 0x22, 0x08, 0xab, 0x25,
  0x56, 0xfa, 0xd2, 0xa4, 0x7f, 0xb1, 0xb6, 0x1e, 0x47, 0x22, 0xc9, 0x8f, 0x50, 0x0f, 0x0d, 0x27,
  0xc1, 0xcb, 0x3d, 0xf2, 0xc6, 0x45, 0xbe, 0x7b, 0x68, 0x34, 0xf3, 0x68, 0x3c, 0x63, 0x7f, 0x44,
  0xcc, 0xea, 0x43, 0x03, 0xd8, 0xf0, 0x1e, 0x1a, 0x5f, 0x01, 0x06, 0x00, 0x67, 0x87, 0xe3, 0x13,
  0xee, 0xca, 0x37, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
};


static const int CLOCK_W = 8;
static const int CLOCK_H = 10;


void EffectClock::init(Display& display) {
  Effect::init(display);

  _image_clock = new Image(Image::IMAGE_PNG, IMAGE_CLOCK, sizeof(IMAGE_CLOCK) / sizeof(IMAGE_CLOCK[0]), true);

  sync();
}


void EffectClock::process(Display& display) {
  static const int OFFSET_X = 22;
  static const int OFFSET_Y = 11;

  if (!Protogen.getStaticMode()) {
    sync();
  }

  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, OFFSET_X + (CLOCK_W * 0), OFFSET_Y, CLOCK_W, CLOCK_H, _hour / 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, OFFSET_X + (CLOCK_W * 1), OFFSET_Y, CLOCK_W, CLOCK_H, _hour % 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, HUB75_PANEL_RES_X + (CLOCK_W * 0), OFFSET_Y, CLOCK_W, CLOCK_H, _hour / 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, HUB75_PANEL_RES_X + (CLOCK_W * 1), OFFSET_Y, CLOCK_W, CLOCK_H, _hour % 10 * CLOCK_W, 0);

  if (_blink == 0) {
    display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, OFFSET_X + (CLOCK_W * 2), OFFSET_Y, CLOCK_W, CLOCK_H, 10 * CLOCK_W, 0);
    display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, HUB75_PANEL_RES_X + (CLOCK_W * 2), OFFSET_Y, CLOCK_W, CLOCK_H, 10 * CLOCK_W, 0);
  }

  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, OFFSET_X + (CLOCK_W * 3), OFFSET_Y, CLOCK_W, CLOCK_H, _minute / 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, OFFSET_X + (CLOCK_W * 4), OFFSET_Y, CLOCK_W, CLOCK_H, _minute % 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, HUB75_PANEL_RES_X + (CLOCK_W * 3), OFFSET_Y, CLOCK_W, CLOCK_H, _minute / 10 * CLOCK_W, 0);
  display.draw_image_newcolor_ex(_image_clock, _colorFunc, 0, DRAW_SINGLE, HUB75_PANEL_RES_X + (CLOCK_W * 4), OFFSET_Y, CLOCK_W, CLOCK_H, _minute % 10 * CLOCK_W, 0);
}


void EffectClock::release(Display& display) {
  if (_image_clock != nullptr) {
    delete _image_clock;
    _image_clock = nullptr;
  }

  Effect::release(display);
}


void EffectClock::sync() {
  _hour = Protogen._rtc.getHour();
  _minute = Protogen._rtc.getMinute();
  // _second = Protogen._rtc.getSecond();
  _blink = Protogen._rtc.getBlink();
}


};
